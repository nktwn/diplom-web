# 📁 Структура проекта

.DS_Store
eslint.config.mjs
export-project.js
next-env.d.ts
next.config.ts
package-lock.json
package.json
postcss.config.mjs
project-export.txt
src/
│  ├─ app/
│  │  ├─ cart/
│  │  │  ├─ page.tsx
│  │  ├─ catalog/
│  │  │  ├─ page.tsx
│  │  ├─ checkout/
│  │  │  ├─ page.tsx
│  │  ├─ favicon.ico
│  │  ├─ globals.css
│  │  ├─ layout.tsx
│  │  ├─ login/
│  │  │  ├─ page.tsx
│  │  ├─ not-found.tsx
│  │  ├─ orders/
│  │  │  ├─ page.tsx
│  │  ├─ page.tsx
│  │  ├─ product/
│  │  │  ├─ [id]/
│  │  │  │  ├─ page.tsx
│  │  ├─ profile/
│  │  │  ├─ page.tsx
│  │  ├─ register/
│  │  │  ├─ page.tsx
│  ├─ components/
│  │  ├─ Footer.tsx
│  │  ├─ Navbar.tsx
│  │  ├─ ProductCard.tsx
│  │  ├─ SupplierSelector.tsx
│  ├─ context/
│  │  ├─ AuthContext.tsx
│  │  ├─ CartContext.tsx
│  ├─ hooks/
│  │  ├─ useAuth.ts
│  ├─ lib/
│  │  ├─ axios.ts
│  ├─ types/
│  │  ├─ index.ts
│  ├─ utils/
│  │  ├─ axiosErrorHandler.ts
tsconfig.json

# 📄 Ключевые файлы и их содержимое



===== 📁 eslint.config.mjs =====

import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;



===== 📁 next-env.d.ts =====

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



===== 📁 next.config.ts =====

import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;



===== 📁 postcss.config.mjs =====

const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;



===== 📁 src/app/cart/page.tsx =====

'use client';

import { useCart } from "@/context/CartContext";
import { useEffect, useState } from "react";
import api from "@/lib/axios";
import { Product } from "@/types";

export default function CartPage() {
    const { cart, checkout, clearCart } = useCart();
    const [products, setProducts] = useState<Record<number, Product>>({});

    useEffect(() => {
        const loadProducts = async () => {
            const ids = [...new Set(cart.map((c) => c.productId))];
            const responses = await Promise.all(
                ids.map((id) => api.get(`/product/${id}`))
            );
            const map: Record<number, Product> = {};
            responses.forEach((r) => {
                map[r.data.product.product.id] = r.data.product.product;
            });
            setProducts(map);
        };
        if (cart.length > 0) loadProducts();
    }, [cart]);

    const handleCheckout = async () => {
        try {
            await checkout();
            alert("Заказ оформлен!");
        } catch {
            alert("Ошибка при оформлении заказа");
        }
    };

    if (cart.length === 0) return <p className="text-center mt-20">Корзина пуста</p>;

    return (
        <div className="max-w-3xl mx-auto space-y-6">
            <h1 className="text-2xl font-bold">Корзина</h1>
            {cart.map((item, index) => {
                const product = products[item.productId];
                return (
                    <div key={index} className="flex justify-between items-center border-b py-2">
                        <div>
                            <p>{product?.name ?? "Загрузка..."}</p>
                            <p className="text-sm text-gray-500">Поставщик ID: {item.supplierId}</p>
                        </div>
                        <p>{item.quantity} шт</p>
                    </div>
                );
            })}
            <div className="flex justify-between mt-6">
                <button onClick={clearCart} className="text-red-600">Очистить</button>
                <button onClick={handleCheckout} className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
                    Оформить заказ
                </button>
            </div>
        </div>
    );
}



===== 📁 src/app/catalog/page.tsx =====

'use client';

import { useEffect, useState } from "react";
import api from "@/lib/axios";
import { Product } from "@/types";
import ProductCard from "@/components/ProductCard";

const LIMIT = 20;

export default function CatalogPage() {
    const [products, setProducts] = useState<Product[]>([]);
    const [page, setPage] = useState(0);
    const [hasNextPage, setHasNextPage] = useState(true);

    useEffect(() => {
        const fetchProducts = async () => {
            try {
                const res = await api.get("/product/list", {
                    params: {
                        limit: LIMIT,
                        offset: page * LIMIT,
                    },
                });
                setProducts(res.data.product_list);
                setHasNextPage(res.data.product_list.length === LIMIT);
            } catch (e) {
                console.error("Не удалось загрузить продукты:", e);
            }
        };

        fetchProducts();
    }, [page]);

    // ближайшие страницы вокруг текущей
    const getNearbyPages = () => {
        const pages = [];
        for (let i = Math.max(0, page - 2); i <= page + 2; i++) {
            if (i === page + 1 && !hasNextPage) break; // не рисуем "следующую" если её нет
            pages.push(i);
        }
        return pages;
    };

    return (
        <div className="w-[90%] mx-auto px-4 py-8 space-y-10">
            <section className="rounded-xl border shadow p-4 bg-gradient-to-br from-[var(--primary)]/10 to-white w-full">
                <h1 className="text-2xl font-bold mb-6 text-[var(--foreground)]">🛍️ Каталог товаров</h1>

                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 xl:grid-cols-5 gap-6">
                    {products.map((product) => (
                        <ProductCard key={product.id} product={product} />
                    ))}
                </div>

                {/* Pagination */}
                <div className="flex justify-center mt-10">
                    <div className="inline-flex gap-2 flex-wrap justify-center items-center">
                        {/* ← */}
                        <button
                            onClick={() => setPage((p) => Math.max(0, p - 1))}
                            disabled={page === 0}
                            className="px-4 py-2 rounded-lg border text-sm font-medium transition disabled:opacity-50
                bg-white text-[#14b8a6] border-[#14b8a6] hover:bg-[#14b8a6] hover:text-white"
                        >
                            ←
                        </button>

                        {/* numbered pages */}
                        {getNearbyPages().map((p) => (
                            <button
                                key={p}
                                onClick={() => setPage(p)}
                                className={`px-4 py-2 rounded-lg text-sm font-medium transition border ${
                                    p === page
                                        ? "bg-[#14b8a6] text-white border-[#14b8a6]"
                                        : "bg-white text-[#14b8a6] border-[#14b8a6] hover:bg-[#14b8a6] hover:text-white"
                                }`}
                            >
                                {p + 1}
                            </button>
                        ))}

                        {/* → */}
                        <button
                            onClick={() => setPage((p) => p + 1)}
                            disabled={!hasNextPage}
                            className="px-4 py-2 rounded-lg border text-sm font-medium transition disabled:opacity-50
                bg-white text-[#14b8a6] border-[#14b8a6] hover:bg-[#14b8a6] hover:text-white"
                        >
                            →
                        </button>
                    </div>
                </div>
            </section>
        </div>
    );
}



===== 📁 src/app/checkout/page.tsx =====




===== 📁 src/app/globals.css =====

@import "tailwindcss";

:root {
  --background: #f9fafb;
  --foreground: #111827;
  --primary: #14b8a6;
  --primary-hover: #0d9488;
  --card-bg: #ffffff;
  --card-border: #e5e7eb;
  --navbar-bg: rgba(255, 255, 255, 0.8);
}

body {
  background-color: var(--background);
  color: var(--foreground);
  font-family: 'Inter', sans-serif;
}

/* globals.css или components.css */

.btn-primary {
  @apply bg-[#14b8a6] text-white px-4 py-2 rounded shadow hover:bg-[#0d9488] transition text-sm;
}

.btn-outline-primary {
  @apply text-[#14b8a6] border border-[#14b8a6] px-4 py-2 rounded shadow hover:bg-[#14b8a6]/10 transition text-sm;
}

.btn-danger {
  @apply text-red-600 border border-red-600 px-4 py-2 rounded shadow hover:bg-red-50 transition text-sm;
}



===== 📁 src/app/layout.tsx =====

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AuthProvider } from "@/context/AuthContext";
import Navbar from "@/components/Navbar";
import { CartProvider } from "@/context/CartContext";
import Footer from "@/components/Footer";

const geistSans = Geist({ variable: "--font-geist-sans", subsets: ["latin"] });
const geistMono = Geist_Mono({ variable: "--font-geist-mono", subsets: ["latin"] });

export const metadata: Metadata = {
    title: "E-commerce Diplom",
    description: "Frontend for diplom project",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
    return (
        <html lang="ru" className="overflow-x-hidden">
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased bg-[var(--background)] text-[var(--foreground)] overflow-x-hidden`}>
        <AuthProvider>
            <CartProvider>
                <Navbar />
                <main className="pt-24 px-4 sm:px-6 lg:px-12 py-6 min-h-screen">
                    {children}
                </main>

                <Footer />
            </CartProvider>
        </AuthProvider>
        </body>
        </html>
    );
}





===== 📁 src/app/login/page.tsx =====

'use client';

import { useState } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useRouter } from "next/navigation";
import Link from "next/link";

export default function LoginPage() {
    const { login } = useAuth();
    const router = useRouter();

    const [form, setForm] = useState({ phone_number: "", password: "" });
    const [error, setError] = useState("");

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        try {
            await login(form.phone_number, form.password);
            router.push("/");
        } catch (err) {
            setError("Неверный номер телефона или пароль");
        }
    };

    return (
        <div className="px-4 pt-28 pb-20 flex justify-center">
            <div className="w-full max-w-2xl border rounded-2xl shadow-xl bg-gradient-to-br from-[var(--primary)]/10 to-white p-10 space-y-8">
                <h1 className="text-3xl font-bold text-center text-[var(--foreground)]">🔐 Вход в аккаунт</h1>
                <form onSubmit={handleSubmit} className="space-y-6">
                    <input
                        type="tel"
                        placeholder="Номер телефона"
                        value={form.phone_number}
                        onChange={(e) => setForm({ ...form, phone_number: e.target.value })}
                        className="w-full p-4 border rounded-lg text-lg"
                    />
                    <input
                        type="password"
                        placeholder="Пароль"
                        value={form.password}
                        onChange={(e) => setForm({ ...form, password: e.target.value })}
                        className="w-full p-4 border rounded-lg text-lg"
                    />
                    {error && <p className="text-red-600 text-center">{error}</p>}
                    <button className="w-full bg-blue-600 text-white py-3 text-lg rounded-lg hover:bg-blue-700 transition">
                        Войти
                    </button>
                </form>

                <p className="text-center text-gray-700 text-base">
                    Ещё не зарегистрированы?{" "}
                    <Link href="/register" className="text-[var(--primary)] hover:underline font-medium">
                        Создать аккаунт →
                    </Link>
                </p>
            </div>
        </div>
    );
}



===== 📁 src/app/not-found.tsx =====

export default function NotFound() {
    return (
        <div className="text-center mt-20">
            <h1 className="text-4xl font-bold">404 — Страница не найдена</h1>
            <p className="mt-4 text-gray-600">Попробуйте вернуться на главную.</p>
        </div>
    );
}



===== 📁 src/app/orders/page.tsx =====




===== 📁 src/app/page.tsx =====

'use client';

import { useEffect, useState } from "react";
import ProductCard from "@/components/ProductCard";
import api from "@/lib/axios";
import Link from "next/link";
import { Product } from "@/types";

const BANNER_IMAGES = ["/banner/img1.png", "/banner/img2.png", "/banner/img3.png", "/banner/img4.png"];

export default function HomePage() {
  const [products, setProducts] = useState<Product[]>([]);
  const [topProducts, setTopProducts] = useState<Product[]>([]);
  const [catalogPage, setCatalogPage] = useState(0);
  const [prevPage, setPrevPage] = useState<number | null>(null);
  const [bannerIndex, setBannerIndex] = useState(0);
  const [prevBannerIndex, setPrevBannerIndex] = useState<number | null>(null);

  useEffect(() => {
    const fetch = async () => {
      try {
        const res = await api.get("/product/list?limit=50&offset=0");
        const productList: Product[] = res.data.product_list;
        setProducts(productList);
        setTopProducts(productList.sort(() => 0.5 - Math.random()).slice(0, 5));
      } catch (e) {
        console.error("Ошибка загрузки продуктов:", e);
      }
    };
    fetch();
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      setPrevBannerIndex(bannerIndex);
      setBannerIndex((prev) => (prev + 1) % BANNER_IMAGES.length);
    }, 8000);
    return () => clearInterval(interval);
  }, [bannerIndex]);

  useEffect(() => {
    const interval = setInterval(() => {
      setPrevPage(catalogPage);
      setCatalogPage((prev) => (prev + 1) % 5);
    }, 8000);
    return () => clearInterval(interval);
  }, [catalogPage]);

  return (
      <div className="space-y-10 w-[90%] mx-auto px-4 py-8">
        {/* БАННЕР */}
        <section className="relative overflow-hidden rounded-xl border shadow bg-[var(--card-bg)] w-full h-[400px]">
          <div className="relative h-full overflow-hidden">
            {BANNER_IMAGES.map((img, idx) => {
              const baseStyle = "absolute inset-0 w-full h-full transition-all duration-[1000ms] ease-in-out";

              const isCurrent = idx === bannerIndex;
              const isPrev = idx === prevBannerIndex;

              return (
                  <div
                      key={idx}
                      className={`${baseStyle} ${isCurrent ? "translate-x-0 opacity-100 z-10" : isPrev ? "-translate-x-full opacity-0 z-0" : "translate-x-full opacity-0 z-0"}`}
                  >
                    {/* Фоновая размытка */}
                    <img
                        src={img}
                        alt=""
                        className="absolute inset-0 w-full h-full object-cover blur-lg scale-110 opacity-40"
                    />
                    {/* Основное изображение */}
                    <div className="relative z-10 w-full h-full flex justify-center items-center">
                      <img
                          src={img}
                          alt={`Banner ${idx}`}
                          className="max-w-[70%] max-h-[80%] object-contain"
                      />
                    </div>
                  </div>
              );
            })}
          </div>

          <div className="absolute bottom-3 left-1/2 transform -translate-x-1/2 flex gap-2">
            {BANNER_IMAGES.map((_, idx) => (
                <span
                    key={idx}
                    className={`w-2 h-2 rounded-full ${
                        idx === bannerIndex ? "bg-[var(--primary)]" : "bg-gray-400"
                    } transition`}
                />
            ))}
          </div>
        </section>


        {/* ТОП-ПРОДАЖ */}
        <section className="rounded-xl border shadow p-4 bg-gradient-to-br from-[var(--primary)]/10 to-white w-full">
          <h2 className="text-2xl font-bold mb-4 text-[var(--foreground)]">🔥 Топ-продаж</h2>
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-4">
            {topProducts.map((product) => (
                <ProductCard key={product.id} product={product} />
            ))}
          </div>
        </section>

        {/* КАТАЛОГ */}
        <section className="rounded-xl border shadow p-4 bg-[var(--card-bg)] w-full">
          <h2 className="text-2xl font-bold mb-4 text-[var(--foreground)]">🛍️ Каталог</h2>
          <div className="relative h-[750px] overflow-hidden">
            {[...Array(5)].map((_, idx) => {
              let className = "absolute inset-0 transition-all duration-[1000ms] ease-in-out";
              if (idx === catalogPage) {
                className += " translate-x-0 opacity-100 z-10";
              } else if (idx === prevPage) {
                className += " -translate-x-full opacity-0 z-0";
              } else {
                className += " translate-x-full opacity-0 z-0";
              }

              return (
                  <div key={idx} className={className}>
                    <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-4">
                      {products.slice(idx * 10, idx * 10 + 10).map((product) => (
                          <ProductCard key={product.id} product={product} />
                      ))}
                    </div>
                  </div>
              );
            })}
          </div>
          <div className="flex justify-center mt-4 gap-2">
            {[...Array(5)].map((_, idx) => (
                <span
                    key={idx}
                    className={`w-2 h-2 rounded-full ${
                        idx === catalogPage ? "bg-blue-600" : "bg-gray-300"
                    } transition`}
                />
            ))}
          </div>
          <div className="text-center mt-6">
            <Link
                href="/catalog"
                className="inline-block text-[var(--primary)] text-base font-semibold border border-[var(--primary)] px-5 py-2 rounded hover:bg-[var(--primary)] hover:text-white transition"
            >
              Смотреть весь каталог →
            </Link>
          </div>
        </section>
      </div>
  );
}



===== 📁 src/app/product/[id]/page.tsx =====

'use client';

import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import Link from "next/link";
import api from "@/lib/axios";
import { Product, Supplier } from "@/types";
import { useCart } from "@/context/CartContext";

interface SupplierOffer {
    price: number;
    sell_amount: number;
    supplier: Supplier;
}

interface ApiResponse {
    product: {
        product: Product;
        suppliers: SupplierOffer[];
    };
}

export default function ProductPage() {
    const { id } = useParams<{ id: string }>();
    const [product, setProduct] = useState<Product | null>(null);
    const [suppliers, setSuppliers] = useState<SupplierOffer[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState("");
    const { addToCart } = useCart();

    useEffect(() => {
        const fetchProduct = async () => {
            try {
                const res = await api.get<ApiResponse>(`/product/${id}`);
                setProduct(res.data.product.product);
                setSuppliers(res.data.product.suppliers);
            } catch (err) {
                console.error("Ошибка загрузки продукта:", err);
                setError("Не удалось загрузить продукт");
            } finally {
                setLoading(false);
            }
        };

        if (id) fetchProduct();
    }, [id]);

    if (loading) return <p>Загрузка...</p>;
    if (error) return <p className="text-red-600">{error}</p>;
    if (!product) return <p>Продукт не найден</p>;

    return (
        <div className="max-w-3xl mx-auto space-y-6">
            <Link href="/" className="text-blue-600 hover:underline">← Назад</Link>

            <div className="flex flex-col sm:flex-row gap-6">
                <img
                    src={product.ImageUrl}
                    alt={product.name}
                    className="w-full sm:w-64 h-64 object-cover border rounded-lg"
                />
                <div className="flex-1">
                    <h1 className="text-2xl font-bold">{product.name}</h1>
                    <p className="text-gray-600 mt-2">
                        от {product.lowest_product_supplier?.price ?? "N/A"}₽
                    </p>
                </div>
            </div>

            <div>
                <h2 className="text-lg font-semibold mt-6 mb-2">Поставщики:</h2>
                {suppliers.length === 0 ? (
                    <p className="text-gray-500">Нет доступных поставщиков.</p>
                ) : (
                    <ul className="space-y-3">
                        {suppliers.map((offer, index) => (
                            <li
                                key={index}
                                className="border p-4 rounded bg-[var(--card-bg)] flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4"
                            >
                                <div>
                                    <p className="font-medium">{offer.supplier.name}</p>
                                    <p className="text-sm text-gray-600">В наличии: {offer.sell_amount}</p>
                                </div>
                                <div className="flex flex-col items-end gap-2">
                                    <p className="text-lg font-semibold text-[var(--primary)]">{offer.price}₽</p>
                                    <button
                                        onClick={() =>
                                            addToCart({
                                                productId: product.id,
                                                supplierId: offer.supplier.id,
                                                quantity: 1,
                                            })
                                        }
                                        className="bg-[var(--primary)] text-white text-sm px-4 py-1.5 rounded hover:bg-[var(--primary-hover)] transition"
                                    >
                                        В корзину
                                    </button>
                                </div>
                            </li>
                        ))}
                    </ul>
                )}
            </div>
        </div>
    );
}



===== 📁 src/app/profile/page.tsx =====

'use client';

import { useEffect, useState } from "react";
import api from "@/lib/axios";
import { useAuth } from "@/hooks/useAuth";
import { useRouter } from "next/navigation";
import Image from "next/image";

interface Address {
    description: string;
    street: string;
}

interface UserProfile {
    id: number;
    name: string;
    phone_number: string;
}

export default function ProfilePage() {
    const { logout } = useAuth();
    const router = useRouter();

    const [profile, setProfile] = useState<UserProfile | null>(null);
    const [addresses, setAddresses] = useState<Address[]>([]);
    const [editing, setEditing] = useState(false);
    const [editForm, setEditForm] = useState({ name: "", phone_number: "" });
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const loadData = async () => {
            try {
                const [profileRes, addressRes] = await Promise.all([
                    api.get("/user/profile"),
                    api.get("/user/address")
                ]);

                setProfile(profileRes.data.user);
                setEditForm({
                    name: profileRes.data.user.name,
                    phone_number: profileRes.data.user.phone_number,
                });

                setAddresses(addressRes.data.address_list || []);
            } catch (e) {
                console.error("Ошибка загрузки профиля", e);
            } finally {
                setLoading(false);
            }
        };

        loadData();
    }, []);

    const handleSaveProfile = async () => {
        try {
            await api.put("/user/profile", editForm);
            setProfile((prev) => prev ? { ...prev, ...editForm } : null);
            setEditing(false);
        } catch (e) {
            alert("Ошибка при обновлении профиля");
        }
    };

    const handleLogout = async () => {
        await logout();
        router.push("/login");
    };

    if (loading) return <p className="text-center mt-20">Загрузка профиля...</p>;
    if (!profile) return <p className="text-center mt-20 text-red-600">Не удалось загрузить профиль</p>;

    return (
        <div className="max-w-2xl mx-auto space-y-6 pt-12">
            {/* Фото + имя + телефон */}
            <div className="flex flex-col items-center gap-4 text-center">
                <Image
                    src="/profile.png"
                    alt="Фото профиля"
                    width={100}
                    height={100}
                    className="rounded-full border shadow-md"
                />
                <div>
                    <h1 className="text-2xl font-bold text-[var(--foreground)]">{profile.name}</h1>
                    <p className="text-gray-600">{profile.phone_number}</p>
                </div>
            </div>

            {/* Редактирование профиля */}
            <div className="bg-[var(--card-bg)] border border-[var(--card-border)] rounded-xl shadow p-6 space-y-4">
                <div className="space-y-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Имя</label>
                        <input
                            type="text"
                            value={editForm.name}
                            disabled={!editing}
                            onChange={(e) => setEditForm({ ...editForm, name: e.target.value })}
                            className="w-full border rounded px-4 py-2 mt-1"
                        />
                    </div>

                    <div>
                        <label className="block text-sm font-medium text-gray-700">Телефон</label>
                        <input
                            type="tel"
                            value={editForm.phone_number}
                            disabled={!editing}
                            onChange={(e) => setEditForm({ ...editForm, phone_number: e.target.value })}
                            className="w-full border rounded px-4 py-2 mt-1"
                        />
                    </div>

                    <div className="flex justify-end">
                        {editing ? (
                            <button
                                onClick={handleSaveProfile}
                                className="btn-primary"
                            >
                                💾 Сохранить
                            </button>
                        ) : (
                            <button
                                onClick={() => setEditing(true)}
                                className="btn-outline-primary"
                            >
                                ✏️ Редактировать
                            </button>
                        )}
                    </div>
                </div>
            </div>

            {/* Список адресов */}
            <div className="bg-[var(--card-bg)] border border-[var(--card-border)] rounded-xl shadow p-6 space-y-4">
                <h2 className="text-xl font-semibold mb-2">Мои адреса</h2>

                {addresses.length === 0 ? (
                    <p className="text-gray-500">Адреса не найдены.</p>
                ) : (
                    <ul className="space-y-3">
                        {addresses.map((addr, idx) => (
                            <li
                                key={idx}
                                className="border border-[var(--card-border)] rounded p-4 bg-white shadow-sm"
                            >
                                <p className="font-medium">{addr.description}</p>
                                <p className="text-gray-600 text-sm">{addr.street}</p>
                            </li>
                        ))}
                    </ul>
                )}
            </div>

            {/* Logout */}
            <div className="text-center">
                <button
                    onClick={handleLogout}
                    className="btn-danger"
                >
                    🚪 Выйти из аккаунта
                </button>
            </div>
        </div>
    );
}



===== 📁 src/app/register/page.tsx =====

'use client';

import { useState } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useRouter } from "next/navigation";
import Link from "next/link";

export default function RegisterPage() {
    const { register } = useAuth();
    const router = useRouter();

    const [form, setForm] = useState({
        name: '',
        phone_number: '',
        password: '',
        confirm_password: '',
    });
    const [error, setError] = useState("");

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (form.password !== form.confirm_password) {
            setError("Пароли не совпадают");
            return;
        }
        try {
            await register(form);
            router.push("/");
        } catch (err) {
            setError("Ошибка регистрации");
        }
    };

    return (
        <div className="px-4 pt-28 pb-20 flex justify-center">
            <div className="w-full max-w-2xl border rounded-2xl shadow-xl bg-gradient-to-br from-[var(--primary)]/10 to-white p-10 space-y-8">
                <h1 className="text-3xl font-bold text-center text-[var(--foreground)]">📝 Регистрация</h1>
                <form onSubmit={handleSubmit} className="space-y-6">
                    <input
                        type="text"
                        placeholder="Имя"
                        value={form.name}
                        onChange={(e) => setForm({ ...form, name: e.target.value })}
                        className="w-full p-4 border rounded-lg text-lg"
                    />
                    <input
                        type="tel"
                        placeholder="Телефон"
                        value={form.phone_number}
                        onChange={(e) => setForm({ ...form, phone_number: e.target.value })}
                        className="w-full p-4 border rounded-lg text-lg"
                    />
                    <input
                        type="password"
                        placeholder="Пароль"
                        value={form.password}
                        onChange={(e) => setForm({ ...form, password: e.target.value })}
                        className="w-full p-4 border rounded-lg text-lg"
                    />
                    <input
                        type="password"
                        placeholder="Повторите пароль"
                        value={form.confirm_password}
                        onChange={(e) => setForm({ ...form, confirm_password: e.target.value })}
                        className="w-full p-4 border rounded-lg text-lg"
                    />
                    {error && <p className="text-red-600 text-center">{error}</p>}
                    <button className="w-full bg-blue-600 text-white py-3 text-lg rounded-lg hover:bg-blue-700 transition">
                        Зарегистрироваться
                    </button>
                </form>

                <p className="text-center text-gray-700 text-base">
                    Уже есть аккаунт?{" "}
                    <Link href="/login" className="text-[var(--primary)] hover:underline font-medium">
                        Войти →
                    </Link>
                </p>
            </div>
        </div>
    );
}



===== 📁 src/components/Footer.tsx =====

// src/components/Footer.tsx
import Image from "next/image";

export default function Footer() {
    return (
        <footer className="bg-gradient-to-br from-[var(--primary)]/10 to-[var(--card-bg)] border-t border-[var(--card-border)] mt-20 px-6 py-12">
            <div className="max-w-7xl mx-auto flex flex-col md:flex-row justify-between items-start gap-12">

                <div className="flex-1 space-y-4 text-sm text-[var(--foreground)]">
                    <h3 className="text-xl font-semibold">Zhan.Store</h3>
                    <p>📍 <strong>г. Астана</strong></p>
                    <p>📦 ООО "Zhan.Store"</p>
                    <p>Осуществляет деятельность в сфере электронной коммерции и дистрибуции товаров по Республике Казахстан.</p>
                    <p>📞 Телефон: <a href="tel:+77471713773" className="text-[var(--primary)] hover:underline">+7 747 171 3773</a></p>
                </div>
                <h3 className="text-xl font-semibold">Сканируйте для связи с поддержкой</h3>
                <div className="flex-shrink-0 text-center md:text-right">
                    <Image
                        src="/qr.png"
                        alt="QR для поддержки"
                        width={150}
                        height={150}
                        className="mx-auto md:ml-auto border border-[var(--card-border)] rounded-lg shadow-md"
                    />
                </div>
            </div>
        </footer>
    );
}



===== 📁 src/components/Navbar.tsx =====

'use client';

import Link from "next/link";
import { useAuth } from "@/context/AuthContext";

export default function Navbar() {
    const { user } = useAuth();

    return (
        <nav className="fixed top-0 left-0 w-full z-50 backdrop-blur-md bg-[var(--navbar-bg)] border-b border-[var(--card-border)] shadow-sm">
            <div className="max-w-7xl mx-auto px-6 py-4 flex justify-between items-center">
                <Link href="/" className="text-2xl font-extrabold text-[var(--primary)] hover:underline">
                    Zhan.Store
                </Link>
                <div className="space-x-6 text-lg font-medium text-[var(--foreground)]">
                    <Link href="/cart" className="hover:text-[var(--primary)]">Корзина</Link>
                    {user ? (
                        <Link href="/profile" className="hover:text-[var(--primary)]">Профиль</Link>
                    ) : (
                        <Link href="/login" className="hover:text-[var(--primary)]">Войти</Link>
                    )}
                </div>
            </div>
        </nav>

    );
}



===== 📁 src/components/ProductCard.tsx =====

import Link from "next/link";
import { Product } from "@/types";

interface ProductCardProps {
    product: Product;
}

export default function ProductCard({ product }: ProductCardProps) {
    const minPrice = product.lowest_product_supplier?.price ?? 0;

    return (
        <Link href={`/product/${product.id}`}>
            <div className="bg-[var(--card-bg)] border border-[var(--card-border)] rounded-xl shadow hover:shadow-md transition-transform transform hover:-translate-y-1 cursor-pointer flex flex-col h-[340px] w-full">
                <div className="w-full h-40 flex items-center justify-center bg-white">
                    <img
                        src={product.ImageUrl}
                        alt={product.name}
                        className="max-h-full max-w-full object-contain"
                    />
                </div>

                <div className="p-3 flex flex-col justify-between flex-grow overflow-hidden">
                    <h3 className="text-md font-semibold text-[var(--foreground)] line-clamp-2 h-[3.2em]">
                        {product.name}
                    </h3>
                    <p className="text-sm text-gray-500 mt-1">от {minPrice.toLocaleString()} ₸</p>
                    <button className="mt-3 w-full bg-[var(--primary)] text-white text-sm py-1.5 rounded hover:bg-[var(--primary-hover)] transition duration-300">
                        Подробнее
                    </button>
                </div>
            </div>
        </Link>
    );
}



===== 📁 src/components/SupplierSelector.tsx =====




===== 📁 src/context/AuthContext.tsx =====

'use client';

import { createContext, useContext, useState, useEffect } from "react";
import api from "@/lib/axios";
import { User } from "@/types";

interface AuthContextType {
    user: User | null;
    login: (phone: string, password: string) => Promise<void>;
    logout: () => Promise<void>;
    register: (data: { name: string; phone_number: string; password: string; confirm_password: string }) => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [user, setUser] = useState<User | null>(null);

    // Проверка при монтировании
    useEffect(() => {
        const token = localStorage.getItem("access_token");
        const expiresAt = localStorage.getItem("expires_at");

        if (token && expiresAt) {
            const now = Date.now();
            if (now < parseInt(expiresAt)) {
                // Здесь ты можешь заменить на реальный вызов /auth/me
                setUser({ id: 0, name: "Пользователь", email: "" });
            } else {
                localStorage.removeItem("access_token");
                localStorage.removeItem("refresh_token");
                localStorage.removeItem("expires_at");
                setUser(null);
            }
        }
    }, []);

    const login = async (phone_number: string, password: string) => {
        const res = await api.post("/auth/login", { phone_number, password });

        const expiresAt = Date.now() + 6 * 60 * 60 * 1000; // 6 часов

        localStorage.setItem("access_token", res.data.access_token);
        localStorage.setItem("refresh_token", res.data.refresh_token);
        localStorage.setItem("expires_at", expiresAt.toString());

        // Пока нет /auth/me — подставим временного пользователя
        setUser({ id: 0, name: "Пользователь", email: "" });
    };

    const register = async (data: { name: string; phone_number: string; password: string; confirm_password: string }) => {
        const res = await api.post("/auth/register", data);
        // Можно сразу залогинить:
        const expiresAt = Date.now() + 6 * 60 * 60 * 1000;
        localStorage.setItem("access_token", res.data.access_token);
        localStorage.setItem("refresh_token", res.data.refresh_token);
        localStorage.setItem("expires_at", expiresAt.toString());
        setUser({ id: 0, name: "Пользователь", email: "" });
    };

    const logout = async () => {
        setUser(null);
        localStorage.removeItem("access_token");
        localStorage.removeItem("refresh_token");
        localStorage.removeItem("expires_at");
    };

    return (
        <AuthContext.Provider value={{ user, login, logout, register }}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) throw new Error("useAuth must be used within AuthProvider");
    return context;
};



===== 📁 src/context/CartContext.tsx =====

'use client';

import { createContext, useContext, useState } from "react";
import api from "@/lib/axios";
import { CartItem } from "@/types";

interface CartContextType {
    cart: CartItem[];
    addToCart: (item: CartItem) => Promise<void>;
    clearCart: () => void;
    checkout: () => Promise<void>;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

export const CartProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [cart, setCart] = useState<CartItem[]>([]);

    const addToCart = async (item: CartItem) => {
        await api.post("/cart/add", {
            product_id: item.productId,
            supplier_id: item.supplierId,
            quantity: item.quantity,
        });

        setCart((prev) => {
            const exists = prev.find(
                (p) => p.productId === item.productId && p.supplierId === item.supplierId
            );
            if (exists) {
                return prev.map((p) =>
                    p.productId === item.productId && p.supplierId === item.supplierId
                        ? { ...p, quantity: p.quantity + item.quantity }
                        : p
                );
            }
            return [...prev, item];
        });
    };

    const clearCart = () => {
        setCart([]);
    };

    const checkout = async () => {
        await api.post("/cart/checkout");
        clearCart();
    };

    return (
        <CartContext.Provider value={{ cart, addToCart, clearCart, checkout }}>
            {children}
        </CartContext.Provider>
    );
};

export const useCart = () => {
    const context = useContext(CartContext);
    if (!context) throw new Error("useCart must be used within CartProvider");
    return context;
};



===== 📁 src/hooks/useAuth.ts =====

export { useAuth } from "@/context/AuthContext";



===== 📁 src/lib/axios.ts =====

// src/lib/axios.ts

import axios from "axios";

const api = axios.create({
    baseURL: "http://188.227.35.6:8080/api",
    withCredentials: false,
});

api.interceptors.request.use((config) => {
    const token = localStorage.getItem("access_token");
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
});

export default api;



===== 📁 src/types/index.ts =====

// types/index.ts

export interface Supplier {
    id: number;
    name: string;
    order_amount: number;
    free_delivery_amount: number;
    delivery_fee: number;
}

export interface Product {
    id: number;
    name: string;
    ImageUrl: string;
    lowest_product_supplier: {
        price: number;
        sell_amount: number;
        supplier: Supplier;
    };
}

export interface CartItem {
    productId: number;
    supplierId: number;
    quantity: number;
}

export interface Cart {
    supplier: Supplier;
    items: CartItem[];
}

export interface Order {
    id: number;
    status: string;
    createdAt: string;
    supplier: Supplier;
    items: CartItem[];
}

export interface User {
    id: number;
    email: string;
    name: string;
}



===== 📁 src/utils/axiosErrorHandler.ts =====

