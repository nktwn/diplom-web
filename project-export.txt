# 📁 Структура проекта

eslint.config.mjs
export-project.js
next-env.d.ts
next.config.ts
package-lock.json
package.json
postcss.config.mjs
project-export.txt
src/
│  ├─ app/
│  │  ├─ cart/
│  │  │  ├─ page.tsx
│  │  ├─ checkout/
│  │  │  ├─ page.tsx
│  │  ├─ favicon.ico
│  │  ├─ globals.css
│  │  ├─ layout.tsx
│  │  ├─ login/
│  │  │  ├─ page.tsx
│  │  ├─ not-found.tsx
│  │  ├─ orders/
│  │  │  ├─ page.tsx
│  │  ├─ page.tsx
│  │  ├─ product/
│  │  │  ├─ [id]/
│  │  │  │  ├─ page.tsx
│  │  ├─ profile/
│  │  │  ├─ page.tsx
│  │  ├─ register/
│  │  │  ├─ page.tsx
│  ├─ components/
│  │  ├─ Navbar.tsx
│  │  ├─ ProductCard.tsx
│  │  ├─ SupplierSelector.tsx
│  ├─ context/
│  │  ├─ AuthContext.tsx
│  │  ├─ CartContext.tsx
│  ├─ hooks/
│  │  ├─ useAuth.ts
│  ├─ lib/
│  │  ├─ axios.ts
│  ├─ types/
│  │  ├─ index.ts
│  ├─ utils/
│  │  ├─ axiosErrorHandler.ts
tsconfig.json

# 📄 Ключевые файлы и их содержимое



===== 📁 eslint.config.mjs =====

import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;



===== 📁 next-env.d.ts =====

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



===== 📁 next.config.ts =====

import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;



===== 📁 postcss.config.mjs =====

const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;



===== 📁 src/app/cart/page.tsx =====

'use client';

import { useCart } from "@/context/CartContext";
import { useEffect, useState } from "react";
import api from "@/lib/axios";
import { Product } from "@/types";

export default function CartPage() {
    const { cart, checkout, clearCart } = useCart();
    const [products, setProducts] = useState<Record<number, Product>>({});

    useEffect(() => {
        const loadProducts = async () => {
            const ids = [...new Set(cart.map((c) => c.productId))];
            const responses = await Promise.all(
                ids.map((id) => api.get(`/product/${id}`))
            );
            const map: Record<number, Product> = {};
            responses.forEach((r) => {
                map[r.data.product.product.id] = r.data.product.product;
            });
            setProducts(map);
        };
        if (cart.length > 0) loadProducts();
    }, [cart]);

    const handleCheckout = async () => {
        try {
            await checkout();
            alert("Заказ оформлен!");
        } catch {
            alert("Ошибка при оформлении заказа");
        }
    };

    if (cart.length === 0) return <p className="text-center mt-20">Корзина пуста</p>;

    return (
        <div className="max-w-3xl mx-auto space-y-6">
            <h1 className="text-2xl font-bold">Корзина</h1>
            {cart.map((item, index) => {
                const product = products[item.productId];
                return (
                    <div key={index} className="flex justify-between items-center border-b py-2">
                        <div>
                            <p>{product?.name ?? "Загрузка..."}</p>
                            <p className="text-sm text-gray-500">Поставщик ID: {item.supplierId}</p>
                        </div>
                        <p>{item.quantity} шт</p>
                    </div>
                );
            })}
            <div className="flex justify-between mt-6">
                <button onClick={clearCart} className="text-red-600">Очистить</button>
                <button onClick={handleCheckout} className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
                    Оформить заказ
                </button>
            </div>
        </div>
    );
}



===== 📁 src/app/checkout/page.tsx =====




===== 📁 src/app/globals.css =====

@import "tailwindcss";

:root {
  --background: #fdf6ee;
  --foreground: #3e2f20;
  --primary: #d87d4a;
  --primary-hover: #a34f20;
  --card-bg: #fff7ed;
  --card-border: #f1e8dd;
}

body {
  background-color: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}



===== 📁 src/app/layout.tsx =====

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AuthProvider } from "@/context/AuthContext";
import Navbar from "@/components/Navbar";
import { CartProvider } from "@/context/CartContext";

const geistSans = Geist({ variable: "--font-geist-sans", subsets: ["latin"] });
const geistMono = Geist_Mono({ variable: "--font-geist-mono", subsets: ["latin"] });

export const metadata: Metadata = {
    title: "E-commerce Diplom",
    description: "Frontend for diplom project",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
    return (
        <html lang="ru">
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <AuthProvider>
            <CartProvider>
                <Navbar />
                <main className="px-4 sm:px-6 lg:px-12 py-6 bg-[var(--background)] text-[var(--foreground)] min-h-screen">
                    {children}</main>
            </CartProvider>
        </AuthProvider>
        </body>
        </html>
    );
}



===== 📁 src/app/login/page.tsx =====

'use client';

import { useState } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useRouter } from "next/navigation";

export default function LoginPage() {
    const { login } = useAuth();
    const router = useRouter();

    const [form, setForm] = useState({ phone_number: "", password: "" });
    const [error, setError] = useState("");

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        try {
            await login(form.phone_number, form.password);
            router.push("/");
        } catch (err) {
            setError("Неверный номер телефона или пароль");
        }
    };

    return (
        <div className="max-w-md mx-auto">
            <h1 className="text-2xl font-bold mb-4">Вход</h1>
            <form onSubmit={handleSubmit} className="space-y-4">
                <input
                    type="tel"
                    placeholder="Номер телефона"
                    value={form.phone_number}
                    onChange={(e) => setForm({ ...form, phone_number: e.target.value })}
                    className="w-full p-2 border rounded"
                />
                <input
                    type="password"
                    placeholder="Пароль"
                    value={form.password}
                    onChange={(e) => setForm({ ...form, password: e.target.value })}
                    className="w-full p-2 border rounded"
                />
                {error && <p className="text-red-600">{error}</p>}
                <button className="bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700">
                    Войти
                </button>
            </form>
        </div>
    );
}



===== 📁 src/app/not-found.tsx =====

export default function NotFound() {
    return (
        <div className="text-center mt-20">
            <h1 className="text-4xl font-bold">404 — Страница не найдена</h1>
            <p className="mt-4 text-gray-600">Попробуйте вернуться на главную.</p>
        </div>
    );
}



===== 📁 src/app/orders/page.tsx =====




===== 📁 src/app/page.tsx =====

'use client';

import { useEffect, useState } from "react";
import api from "@/lib/axios";
import { Product } from "@/types";
import ProductCard from "@/components/ProductCard";

const LIMIT = 28;

export default function HomePage() {
  const [products, setProducts] = useState<Product[]>([]);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [page, setPage] = useState(0);

  const totalPages = Math.ceil(total / LIMIT);

  useEffect(() => {
    const fetchProducts = async () => {
      setLoading(true);
      setError("");
      try {
        const res = await api.get("/product/list", {
          params: {
            limit: LIMIT,
            offset: page * LIMIT,
          },
        });
        setProducts(res.data.product_list);
        setTotal(res.data.total); // Предполагается, что сервер возвращает общее количество продуктов
      } catch (e) {
        console.error("❌ Failed to load products:", e);
        setError("Не удалось загрузить продукты");
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [page]);

  const getVisiblePages = () => {
    const delta = 2;
    const pages: (number | string)[] = [];

    const left = Math.max(0, page - delta);
    const right = Math.min(totalPages - 1, page + delta);

    if (left > 0) {
      pages.push(0);
      if (left > 1) pages.push("...");
    }

    for (let i = left; i <= right; i++) {
      pages.push(i);
    }

    if (right < totalPages - 1) {
      if (right < totalPages - 2) pages.push("...");
      pages.push(totalPages - 1);
    }

    return pages;
  };

  if (loading) return <p>Загрузка...</p>;
  if (error) return <p className="text-red-600">{error}</p>;

  return (
      <div className="space-y-8">
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 xl:grid-cols-5 gap-6 mt-4">
        {products.map((product) => (
              <ProductCard key={product.id} product={product} />
          ))}
        </div>

        <div className="flex justify-center gap-2 mt-8 flex-wrap">
          <button
              disabled={page === 0}
              onClick={() => setPage((p) => Math.max(0, p - 1))}
              className="px-3 py-1 bg-gray-200 rounded disabled:opacity-50"
          >
            Назад
          </button>

          {getVisiblePages().map((p, index) =>
              p === "..." ? (
                  <span key={`ellipsis-${index}`} className="px-2 py-1">
              ...
            </span>
              ) : (
                  <button
                      key={p}
                      onClick={() => setPage(Number(p))}
                      className={`px-3 py-1 rounded ${
                          p === page ? "bg-blue-500 text-white" : "bg-gray-200"
                      }`}
                  >
                    {Number(p) + 1}
                  </button>
              )
          )}

          <button
              disabled={page >= totalPages - 1}
              onClick={() => setPage((p) => p + 1)}
              className="px-3 py-1 bg-gray-200 rounded disabled:opacity-50"
          >
            Вперед
          </button>
        </div>
      </div>
  );
}



===== 📁 src/app/product/[id]/page.tsx =====

'use client';

import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import Link from "next/link";
import api from "@/lib/axios";
import { Product, Supplier } from "@/types";
import { useCart } from "@/context/CartContext";

interface SupplierOffer {
    price: number;
    sell_amount: number;
    supplier: Supplier;
}

interface ApiResponse {
    product: {
        product: Product;
        suppliers: SupplierOffer[];
    };
}

export default function ProductPage() {
    const { id } = useParams<{ id: string }>();
    const [product, setProduct] = useState<Product | null>(null);
    const [suppliers, setSuppliers] = useState<SupplierOffer[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState("");
    const { addToCart } = useCart();

    useEffect(() => {
        const fetchProduct = async () => {
            try {
                const res = await api.get<ApiResponse>(`/product/${id}`);
                setProduct(res.data.product.product);
                setSuppliers(res.data.product.suppliers);
            } catch (err) {
                console.error("Ошибка загрузки продукта:", err);
                setError("Не удалось загрузить продукт");
            } finally {
                setLoading(false);
            }
        };

        if (id) fetchProduct();
    }, [id]);

    if (loading) return <p>Загрузка...</p>;
    if (error) return <p className="text-red-600">{error}</p>;
    if (!product) return <p>Продукт не найден</p>;

    return (
        <div className="max-w-3xl mx-auto space-y-6">
            <Link href="/" className="text-blue-600 hover:underline">← Назад</Link>

            <div className="flex flex-col sm:flex-row gap-6">
                <img
                    src={product.ImageUrl}
                    alt={product.name}
                    className="w-full sm:w-64 h-64 object-cover border rounded-lg"
                />
                <div className="flex-1">
                    <h1 className="text-2xl font-bold">{product.name}</h1>
                    <p className="text-gray-600 mt-2">
                        от {product.lowest_product_supplier?.price ?? "N/A"}₽
                    </p>
                </div>
            </div>

            <div>
                <h2 className="text-lg font-semibold mt-6 mb-2">Поставщики:</h2>
                {suppliers.length === 0 ? (
                    <p className="text-gray-500">Нет доступных поставщиков.</p>
                ) : (
                    <ul className="space-y-3">
                        {suppliers.map((offer, index) => (
                            <li
                                key={index}
                                className="border p-4 rounded bg-[var(--card-bg)] flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4"
                            >
                                <div>
                                    <p className="font-medium">{offer.supplier.name}</p>
                                    <p className="text-sm text-gray-600">В наличии: {offer.sell_amount}</p>
                                </div>
                                <div className="flex flex-col items-end gap-2">
                                    <p className="text-lg font-semibold text-[var(--primary)]">{offer.price}₽</p>
                                    <button
                                        onClick={() =>
                                            addToCart({
                                                productId: product.id,
                                                supplierId: offer.supplier.id,
                                                quantity: 1,
                                            })
                                        }
                                        className="bg-[var(--primary)] text-white text-sm px-4 py-1.5 rounded hover:bg-[var(--primary-hover)] transition"
                                    >
                                        В корзину
                                    </button>
                                </div>
                            </li>
                        ))}
                    </ul>
                )}
            </div>
        </div>
    );
}



===== 📁 src/app/profile/page.tsx =====

// app/profile/page.tsx
export default function ProfilePage() {
    return (
        <div className="text-center mt-20">
            <h1 className="text-3xl font-bold">Профиль</h1>
            <p className="mt-2 text-gray-600">Страница профиля в разработке.</p>
        </div>
    );
}



===== 📁 src/app/register/page.tsx =====

'use client';

import { useState } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useRouter } from "next/navigation";

export default function RegisterPage() {
    const { register } = useAuth();
    const router = useRouter();

    const [form, setForm] = useState({
        name: '',
        phone_number: '',
        password: '',
        confirm_password: '',
    });
    const [error, setError] = useState("");

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (form.password !== form.confirm_password) {
            setError("Пароли не совпадают");
            return;
        }
        try {
            await register(form);
            router.push("/");
        } catch (err) {
            setError("Ошибка регистрации");
        }
    };

    return (
        <div className="max-w-md mx-auto">
            <h1 className="text-2xl font-bold mb-4">Регистрация</h1>
            <form onSubmit={handleSubmit} className="space-y-4">
                <input
                    type="text"
                    placeholder="Имя"
                    value={form.name}
                    onChange={(e) => setForm({ ...form, name: e.target.value })}
                    className="w-full p-2 border rounded"
                />
                <input
                    type="tel"
                    placeholder="Телефон"
                    value={form.phone_number}
                    onChange={(e) => setForm({ ...form, phone_number: e.target.value })}
                    className="w-full p-2 border rounded"
                />
                <input
                    type="password"
                    placeholder="Пароль"
                    value={form.password}
                    onChange={(e) => setForm({ ...form, password: e.target.value })}
                    className="w-full p-2 border rounded"
                />
                <input
                    type="password"
                    placeholder="Повторите пароль"
                    value={form.confirm_password}
                    onChange={(e) => setForm({ ...form, confirm_password: e.target.value })}
                    className="w-full p-2 border rounded"
                />
                {error && <p className="text-red-600">{error}</p>}
                <button className="bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700">
                    Зарегистрироваться
                </button>
            </form>
        </div>
    );
}



===== 📁 src/components/Navbar.tsx =====

'use client';

import Link from "next/link";
import { useAuth } from "@/context/AuthContext";

export default function Navbar() {
    const { user } = useAuth();

    return (
        <nav className="bg-[var(--card-bg)] text-[var(--foreground)] p-4 flex justify-between items-center border-b border-[var(--card-border)]">
            <div className="space-x-4">
                <button className="hover:text-[var(--primary)]">Filters</button>
                <button className="hover:text-[var(--primary)]">Sort</button>
            </div>
            <div className="space-x-4 text-lg font-medium">
                <Link href="/" className="hover:text-[var(--primary)]">Catalogue</Link>
                <Link href="/cart" className="hover:text-[var(--primary)]">Cart</Link>
            </div>
            <div>
                {user ? (
                    <Link href="/profile" className="hover:text-[var(--primary)]">Profile</Link>
                ) : (
                    <Link href="/login" className="hover:text-[var(--primary)]">Login</Link>
                )}
            </div>
        </nav>

    );
}



===== 📁 src/components/ProductCard.tsx =====

import Link from "next/link";
import { Product } from "@/types";

interface ProductCardProps {
    product: Product;
}

export default function ProductCard({ product }: ProductCardProps) {
    const minPrice = product.lowest_product_supplier?.price ?? 0;

    return (
        <Link href={`/product/${product.id}`}>
            <div className="bg-[var(--card-bg)] border border-[var(--card-border)] rounded-xl shadow-sm overflow-hidden transform transition duration-300 hover:scale-[1.03] hover:shadow-md cursor-pointer">
                <img
                    src={product.ImageUrl}
                    alt={product.name}
                    className="w-full h-40 object-cover"
                />
                <div className="p-3">
                    <h3 className="text-md font-semibold text-[var(--foreground)]">{product.name}</h3>
                    <p className="text-sm text-gray-500 mt-1">от {minPrice}₽</p>
                    <button className="mt-3 w-full bg-[var(--primary)] text-white text-sm py-1.5 rounded hover:bg-[var(--primary-hover)] transition duration-300">
                        Подробнее
                    </button>
                </div>
            </div>
        </Link>
    );
}



===== 📁 src/components/SupplierSelector.tsx =====




===== 📁 src/context/AuthContext.tsx =====

'use client';

import { createContext, useContext, useState } from "react";
import api from "@/lib/axios";
import { User } from "@/types";

interface AuthContextType {
    user: User | null;
    login: (phone: string, password: string) => Promise<void>;
    logout: () => Promise<void>;
    register: (data: { name: string; phone_number: string; password: string; confirm_password: string }) => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [user, setUser] = useState<User | null>(null);

    const login = async (phone_number: string, password: string) => {
        const res = await api.post("/auth/login", { phone_number, password });

        // ✅ Сохраняем токены
        localStorage.setItem("access_token", res.data.access_token);
        localStorage.setItem("refresh_token", res.data.refresh_token);

        // ❗ Пока нет /auth/me — можно установить временного пользователя
        setUser({ id: 0, name: "Пользователь", email: "" });
    };



    const register = async (data: { name: string; phone_number: string; password: string; confirm_password: string }) => {
        const res = await api.post("/auth/register", data);
        setUser(res.data);
    };

    const logout = async () => {
        // Просто сбрасываем состояние юзера — без API-запроса
        setUser(null);
    };

    return (
        <AuthContext.Provider value={{ user, login, logout, register }}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) throw new Error("useAuth must be used within AuthProvider");
    return context;
};



===== 📁 src/context/CartContext.tsx =====

'use client';

import { createContext, useContext, useState } from "react";
import api from "@/lib/axios";
import { CartItem } from "@/types";

interface CartContextType {
    cart: CartItem[];
    addToCart: (item: CartItem) => Promise<void>;
    clearCart: () => void;
    checkout: () => Promise<void>;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

export const CartProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [cart, setCart] = useState<CartItem[]>([]);

    const addToCart = async (item: CartItem) => {
        await api.post("/cart/add", {
            product_id: item.productId,
            supplier_id: item.supplierId,
            quantity: item.quantity,
        });

        setCart((prev) => {
            const exists = prev.find(
                (p) => p.productId === item.productId && p.supplierId === item.supplierId
            );
            if (exists) {
                return prev.map((p) =>
                    p.productId === item.productId && p.supplierId === item.supplierId
                        ? { ...p, quantity: p.quantity + item.quantity }
                        : p
                );
            }
            return [...prev, item];
        });
    };

    const clearCart = () => {
        setCart([]);
    };

    const checkout = async () => {
        await api.post("/cart/checkout");
        clearCart();
    };

    return (
        <CartContext.Provider value={{ cart, addToCart, clearCart, checkout }}>
            {children}
        </CartContext.Provider>
    );
};

export const useCart = () => {
    const context = useContext(CartContext);
    if (!context) throw new Error("useCart must be used within CartProvider");
    return context;
};



===== 📁 src/hooks/useAuth.ts =====

export { useAuth } from "@/context/AuthContext";



===== 📁 src/lib/axios.ts =====

import axios from "axios";

const api = axios.create({
    baseURL: "http://localhost:8080/api",
    withCredentials: false, // отключаем cookie
});

api.interceptors.request.use((config) => {
    const token = localStorage.getItem("access_token");
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
});

export default api;



===== 📁 src/types/index.ts =====

// types/index.ts

export interface Supplier {
    id: number;
    name: string;
    order_amount: number;
    free_delivery_amount: number;
    delivery_fee: number;
}

export interface Product {
    id: number;
    name: string;
    ImageUrl: string;
    lowest_product_supplier: {
        price: number;
        sell_amount: number;
        supplier: Supplier;
    };
}

export interface CartItem {
    productId: number;
    supplierId: number;
    quantity: number;
}

export interface Cart {
    supplier: Supplier;
    items: CartItem[];
}

export interface Order {
    id: number;
    status: string;
    createdAt: string;
    supplier: Supplier;
    items: CartItem[];
}

export interface User {
    id: number;
    email: string;
    name: string;
}



===== 📁 src/utils/axiosErrorHandler.ts =====

